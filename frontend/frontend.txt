src/
src//app
src//app/contexts
src//app/utils
src//app/components
src//app/register
src//app/profile
src//app/login
src//app/gadgets
src//app/gadgets/new
src//app/gadgets/[id]
src//components
src//components/ui
src//lib
===== src//app/layout.jsx =====
import "./globals.css"
import { AuthProvider } from "./contexts/AuthContext"
import Navbar from "./components/Navbar"
import { ThemeProvider } from "./components/theme-provider"

export default function RootLayout({ children }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <title>IMF Gadget System</title>
        <meta name="description" content="IMF Gadget Management System" />
        <link rel="icon" href="/favicon.ico" />
      </head>
      <body>
        <ThemeProvider attribute="class" defaultTheme="dark">
          <AuthProvider>
            <div className="min-h-screen bg-gradient-to-br from-background to-background/90">
              <Navbar />
              <main className="container mx-auto px-4 py-6">{children}</main>
            </div>
          </AuthProvider>
        </ThemeProvider>
      </body>
    </html>
  )
}




===== src//app/contexts/AuthContext.jsx =====
"use client";
import { createContext, useContext, useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Cookies from 'js-cookie';
import { auth } from '../utils/api';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    // Check if user is logged in
    const checkAuth = async () => {
      const token = Cookies.get('token');
      if (token) {
        try {
          const { data } = await auth.getProfile();
          setUser(data);
        } catch (error) {
          console.error('Auth token invalid', error);
          Cookies.remove('token');
        }
      }
      setLoading(false);
    };

    checkAuth();
  }, []);

  const login = async (credentials) => {
    try {
      const { data } = await auth.login(credentials);
      // Extract token from the nested `data` object
      const token = data.data.token;
      console.log('Token from login response:', token); // Debugging
  
      // Set the token in the cookie
      Cookies.set('token', token, { 
        expires: 7, // Expires in 7 days
        domain: 'localhost', // Set the domain to localhost
        sameSite: 'lax', // Allow cookies to be sent with same-site requests
        secure: false, // Set to true if using HTTPS
      });
  
      // Fetch the user profile using the token
      const profileResp = await auth.getProfile();
      setUser(profileResp.data.data.user);
      return { success: true };
    } catch (error) {
      return { 
        success: false, 
        message: error.response?.data?.message || 'Login failed' 
      };
    }
  };

  const register = async (userData) => {
    try {
      await auth.register(userData);
      return { success: true };
    } catch (error) {
      return { 
        success: false, 
        message: error.response?.data?.message || 'Registration failed' 
      };
    }
  };

  const logout = () => {
    Cookies.remove('token');
    setUser(null);
    router.push('/login');
  };

  const isAdmin = () => {
    return user?.role === 'admin';
  };

  return (
    <AuthContext.Provider value={{ 
      user, 
      login, 
      logout, 
      register, 
      isAdmin, 
      isAuthenticated: !!user,
      loading 
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

export default AuthContext;


===== src//app/page.jsx =====
"use client"; // Mark as Client Component
import { useEffect } from 'react';
import { useRouter } from 'next/navigation'; // Use `next/navigation` instead of `next/router`
import { useAuth } from './contexts/AuthContext';

export default function Home() {
  const { isAuthenticated, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      if (isAuthenticated) {
        router.push('/gadgets');
      } else {
        router.push('/login');
      }
    }
  }, [isAuthenticated, loading, router]);

  return (
    <div className="flex justify-center items-center h-64">
      <div className="text-center">
        <h1 className="text-3xl font-bold mb-4">IMF Gadget Management System</h1>
        <p>Redirecting...</p>
      </div>
    </div>
  );
}


===== src//app/utils/helpers.js =====
// Get status color class based on gadget status
export const getStatusColor = (status) => {
    switch (status) {
      case 'Available':
        return 'bg-green-100 text-green-800';
      case 'Deployed':
        return 'bg-blue-100 text-blue-800';
      case 'Destroyed':
        return 'bg-red-100 text-red-800';
      case 'Decommissioned':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-600';
    }
  };
  
  // Format date to readable string
  export const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };
  
  // Calculate success probability color
  export const getProbabilityColor = (probability) => {
    if (probability >= 80) return 'text-green-600';
    if (probability >= 50) return 'text-yellow-600';
    return 'text-red-600';
  };


===== src//app/utils/api.js =====
import axios from 'axios';
import Cookies from 'js-cookie';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api';

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add token to every request if it exists
api.interceptors.request.use(
  (config) => {
    const token = Cookies.get('token');
    console.log('Token:', token);
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

export const auth = {
  register: (userData) => api.post('/auth/register', userData),
  login: (credentials) => api.post('/auth/login', credentials),
  getProfile: () => api.get('/auth/profile'),
};

export const gadgets = {
  getAll: (status) => {
    const query = status ? `?status=${status}` : '';
    return api.get(`/gadgets${query}`);
  },
  getById: (id) => api.get(`/gadgets/${id}`),
  create: (gadgetData) => api.post('/gadgets', gadgetData),
  update: (id, gadgetData) => api.patch(`/gadgets/${id}`, gadgetData),
  decommission: (id) => api.delete(`/gadgets/${id}`),
  selfDestruct: (id, confirmationCode) => 
    api.post(`/gadgets/${id}/self-destruct`, { confirmationCode }),
};

export default api;


===== src//app/components/GadgetCard.jsx =====
"use client"

import Link from "next/link"
import { getStatusColor, getProbabilityColor, formatDate } from "../utils/helpers"
import { motion } from "framer-motion"
import { Info, Edit, Zap } from "lucide-react"
import { Badge } from "@/components/ui/badge"

const GadgetCard = ({ gadget, isAdmin = false }) => {
  return (
    <motion.div
      className="card overflow-hidden group"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      whileHover={{ y: -5 }}
    >
      <div className="absolute top-0 right-0 w-24 h-24 bg-primary/10 rounded-full -mr-12 -mt-12 z-0" />
      <div className="absolute bottom-0 left-0 w-16 h-16 bg-primary/5 rounded-full -ml-8 -mb-8 z-0" />

      <div className="relative z-10">
        <div className="flex justify-between items-start">
          <h3 className="text-lg font-bold bg-gradient-to-r from-primary to-purple-400 bg-clip-text text-transparent">
            {gadget.name}
          </h3>
          <Badge variant="outline" className={`${getStatusColor(gadget.status)} transition-all duration-300`}>
            {gadget.status}
          </Badge>
        </div>

        <div className="text-sm text-muted-foreground mb-1 mt-2">
          Codename: <span className="font-mono bg-muted/50 px-1 rounded">{gadget.codename}</span>
        </div>

        <div className="text-sm text-muted-foreground mb-3 flex items-center">
          <span>Mission Success Rate:</span>
          <span className={`ml-1 font-semibold ${getProbabilityColor(gadget.successProbability)}`}>
            <span className="inline-flex items-center">
              <Zap className="h-3 w-3 mr-1" />
              {gadget.successProbability}%
            </span>
          </span>
        </div>

        <p className="text-sm mb-4 line-clamp-2 group-hover:line-clamp-none transition-all duration-300">
          {gadget.description}
        </p>

        {gadget.decommissionedAt && (
          <div className="text-xs text-muted-foreground mb-3">
            Decommissioned: {formatDate(gadget.decommissionedAt)}
          </div>
        )}

        <div className="flex justify-end space-x-2 mt-4">
          <Link
            href={`/gadgets/${gadget.id}`}
            className="btn-secondary text-sm inline-flex items-center gap-1 hover:gap-2 transition-all duration-300"
          >
            <Info className="h-4 w-4" />
            <span>Details</span>
          </Link>

          {isAdmin && gadget.status !== "Destroyed" && gadget.status !== "Decommissioned" && (
            <Link
              href={`/gadgets/${gadget.id}?edit=true`}
              className="btn-primary text-sm inline-flex items-center gap-1 hover:gap-2 transition-all duration-300"
            >
              <Edit className="h-4 w-4" />
              <span>Edit</span>
            </Link>
          )}
        </div>
      </div>
    </motion.div>
  )
}

export default GadgetCard




===== src//app/components/GadgetList.jsx =====
"use client"

import { useState } from "react"
import GadgetCard from "./GadgetCard"
import { motion } from "framer-motion"
import { Filter, Plus } from "lucide-react"
import Link from "next/link"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

const GadgetList = ({ gadgets = [], isAdmin = false }) => {
  const [filter, setFilter] = useState("")

  const statusOptions = [
    { value: "all", label: "All Statuses" },  // Use a non-empty string for the default option
    { value: "Available", label: "Available" },
    { value: "Deployed", label: "Deployed" },
    { value: "Destroyed", label: "Destroyed" },
    { value: "Decommissioned", label: "Decommissioned" },
  ]
  
  const filteredGadgets = filter && filter !== "all" ? gadgets.filter((g) => g.status === filter) : gadgets

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  }

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }}>
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
        <div>
          <p className="text-muted-foreground mt-1">Browse the latest Gadgets</p>
        </div>

        <div className="flex flex-col sm:flex-row gap-3 w-full md:w-auto">
          <div className="flex items-center gap-2">
            <Filter className="h-4 w-4 text-muted-foreground" />
            <Select value={filter} onValueChange={setFilter}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                {statusOptions.map((option) => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {isAdmin && (
            <Link
              href="/gadgets/new"
              className="btn-primary inline-flex items-center gap-1 hover:gap-2 transition-all duration-300"
            >
              <Plus className="h-4 w-4" />
              <span>New Gadget</span>
            </Link>
          )}
        </div>
      </div>

      <motion.div
        className="grid gap-6 md:grid-cols-2 lg:grid-cols-3"
        variants={container}
        initial="hidden"
        animate="show"
      >
        {filteredGadgets.length > 0 ? (
          filteredGadgets.map((gadget) => <GadgetCard key={gadget.id} gadget={gadget} isAdmin={isAdmin} />)
        ) : (
          <div className="md:col-span-2 lg:col-span-3 text-center py-16 border border-dashed rounded-lg bg-muted/30">
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ duration: 0.5 }}
            >
              <p className="text-xl text-muted-foreground">No gadgets found.</p>
              {isAdmin && (
                <Link href="/gadgets/new" className="btn-primary mt-4 inline-flex items-center gap-1">
                  <Plus className="h-4 w-4" />
                  <span>Create New Gadget</span>
                </Link>
              )}
            </motion.div>
          </div>
        )}
      </motion.div>
    </motion.div>
  )
}

export default GadgetList




===== src//app/components/ProtectedRoute.jsx =====
import { useRouter } from 'next/router';
import { useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';

const ProtectedRoute = ({ children, adminOnly = false }) => {
  const { isAuthenticated, isAdmin, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      if (!isAuthenticated) {
        router.push('/login');
      } else if (adminOnly && !isAdmin()) {
        router.push('/gadgets');
      }
    }
  }, [isAuthenticated, isAdmin, loading, router, adminOnly]);

  if (loading || !isAuthenticated || (adminOnly && !isAdmin())) {
    return <div className="flex justify-center items-center h-screen">Loading...</div>;
  }

  return children;
};

export default ProtectedRoute;


===== src//app/components/Navbar.jsx =====
"use client"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { useAuth } from "../contexts/AuthContext"
import { useState, useEffect } from "react"
import { Fingerprint, LogOut, Menu, X, User, Briefcase, Plus, Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"

const Navbar = () => {
  const { user, logout, isAuthenticated } = useAuth()
  const router = useRouter()
  const [isOpen, setIsOpen] = useState(false)
  const [mounted, setMounted] = useState(false)
  const { theme, setTheme } = useTheme()

  useEffect(() => {
    setMounted(true)
  }, [])

  const handleLogout = () => {
    logout()
    router.push("/login")
  }

  const toggleMenu = () => {
    setIsOpen(!isOpen)
  }

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark")
  }

  return (
    <nav className="bg-primary/10 dark:bg-black/90 text-foreground dark:text-white shadow-lg backdrop-blur-sm sticky top-0 z-50 border-b border-primary/20">
      <div className="container mx-auto px-4">
        <div className="flex justify-between h-16 items-center">
          <div className="flex items-center">
            <Link href="/" className="font-bold text-xl flex items-center gap-2 group">
              <Fingerprint className="h-6 w-6 text-primary group-hover:animate-pulse" />
              <span className="bg-gradient-to-r from-primary to-purple-400 bg-clip-text text-transparent">
                IMF Gadget System
              </span>
            </Link>
          </div>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-4">
            {isAuthenticated ? (
              <>
                <Link
                  href="/gadgets"
                  className="text-foreground dark:text-white hover:text-primary transition-colors duration-200 flex items-center gap-1"
                >
                  <Briefcase className="h-4 w-4" />
                  <span>Gadgets</span>
                </Link>
                {user?.role === "admin" && (
                  <Link
                    href="/gadgets/new"
                    className="text-foreground dark:text-white hover:text-primary transition-colors duration-200 flex items-center gap-1"
                  >
                    <Plus className="h-4 w-4" />
                    <span>New Gadget</span>
                  </Link>
                )}
                <Link
                  href="/profile"
                  className="text-foreground dark:text-white hover:text-primary transition-colors duration-200 flex items-center gap-1"
                >
                  <User className="h-4 w-4" />
                  <span>Profile</span>
                </Link>
                <button
                  onClick={handleLogout}
                  className="text-foreground dark:text-white hover:text-primary transition-colors duration-200 flex items-center gap-1"
                >
                  <LogOut className="h-4 w-4" />
                  <span>Logout</span>
                </button>
              </>
            ) : (
              <>
                <Link
                  href="/login"
                  className="text-foreground dark:text-white hover:text-primary transition-colors duration-200"
                >
                  Login
                </Link>
                <Link
                  href="/register"
                  className="text-foreground dark:text-white hover:text-primary transition-colors duration-200"
                >
                  Register
                </Link>
              </>
            )}

            {mounted && (
              <Button
                variant="ghost"
                size="icon"
                onClick={toggleTheme}
                className="h-9 w-9 rounded-full text-foreground dark:text-white hover:text-primary dark:hover:text-primary"
              >
                {theme === "light" ? (
                  <Moon className="h-4 w-4 transition-all" />
                ) : (
                  <Sun className="h-4 w-4 transition-all" />
                )}
                <span className="sr-only">Toggle theme</span>
              </Button>
            )}
          </div>

          {/* Mobile Menu Button */}
          <div className="md:hidden flex items-center gap-2">
            {mounted && (
              <Button
                variant="ghost"
                size="icon"
                className="h-9 w-9 rounded-full text-foreground dark:text-white"
                onClick={toggleTheme}
              >
                {theme === "light" ? <Moon className="h-4 w-4" /> : <Sun className="h-4 w-4" />}
                <span className="sr-only">Toggle theme</span>
              </Button>
            )}
            <button onClick={toggleMenu} className="text-foreground dark:text-white">
              {isOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile Menu */}
      {isOpen && (
        <div className="md:hidden bg-background/95 dark:bg-black/95 backdrop-blur-sm border-t border-primary/20 animate-in slide-in-from-top duration-300">
          <div className="px-4 py-4 space-y-3">
            {isAuthenticated ? (
              <>
                <Link
                  href="/gadgets"
                  className="block text-foreground dark:text-white hover:text-primary transition-colors duration-200 py-2 flex items-center gap-2"
                  onClick={() => setIsOpen(false)}
                >
                  <Briefcase className="h-5 w-5" />
                  <span>Gadgets</span>
                </Link>
                {user?.role === "admin" && (
                  <Link
                    href="/gadgets/new"
                    className="block text-foreground dark:text-white hover:text-primary transition-colors duration-200 py-2 flex items-center gap-2"
                    onClick={() => setIsOpen(false)}
                  >
                    <Plus className="h-5 w-5" />
                    <span>New Gadget</span>
                  </Link>
                )}
                <Link
                  href="/profile"
                  className="block text-foreground dark:text-white hover:text-primary transition-colors duration-200 py-2 flex items-center gap-2"
                  onClick={() => setIsOpen(false)}
                >
                  <User className="h-5 w-5" />
                  <span>Profile</span>
                </Link>
                <button
                  onClick={() => {
                    handleLogout()
                    setIsOpen(false)
                  }}
                  className="block w-full text-left text-foreground dark:text-white hover:text-primary transition-colors duration-200 py-2 flex items-center gap-2"
                >
                  <LogOut className="h-5 w-5" />
                  <span>Logout</span>
                </button>
              </>
            ) : (
              <>
                <Link
                  href="/login"
                  className="block text-foreground dark:text-white hover:text-primary transition-colors duration-200 py-2"
                  onClick={() => setIsOpen(false)}
                >
                  Login
                </Link>
                <Link
                  href="/register"
                  className="block text-foreground dark:text-white hover:text-primary transition-colors duration-200 py-2"
                  onClick={() => setIsOpen(false)}
                >
                  Register
                </Link>
              </>
            )}
          </div>
        </div>
      )}
    </nav>
  )
}

export default Navbar


===== src//app/components/theme-provider.jsx =====
// src/components/theme-provider.js

"use client"

import { ThemeProvider as NextThemeProvider } from "next-themes"

export function ThemeProvider({ children }) {
  return (
    <NextThemeProvider attribute="class">
      {children}
    </NextThemeProvider>
  )
}



===== src//app/components/AuthForm.jsx =====
import { useState } from 'react';

const AuthForm = ({ onSubmit, isRegister = false }) => {
  const [formData, setFormData] = useState({
    username: '',
    password: '',
    role: 'agent'
  });
  const [error, setError] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    try {
      const result = await onSubmit(formData);
      if (!result.success) {
        setError(result.message);
      }
    } catch (err) {
      setError('An unexpected error occurred');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-md mx-auto">
      <div className="mb-4">
        <label htmlFor="username" className="block mb-2 text-sm font-medium">
          Username
        </label>
        <input
          type="text"
          id="username"
          name="username"
          value={formData.username}
          onChange={handleChange}
          className="input w-full"
          required
        />
      </div>
      
      <div className="mb-4">
        <label htmlFor="password" className="block mb-2 text-sm font-medium">
          Password
        </label>
        <input
          type="password"
          id="password"
          name="password"
          value={formData.password}
          onChange={handleChange}
          className="input w-full"
          required
        />
      </div>
      
      {isRegister && (
        <div className="mb-4">
          <label htmlFor="role" className="block mb-2 text-sm font-medium">
            Role
          </label>
          <select
            id="role"
            name="role"
            value={formData.role}
            onChange={handleChange}
            className="input w-full"
          >
            <option value="agent">Agent</option>
            <option value="admin">Administrator</option>
          </select>
        </div>
      )}
      
      {error && <div className="text-red-500 mb-4">{error}</div>}
      
      <button type="submit" className="btn-primary w-full">
        {isRegister ? 'Register' : 'Login'}
      </button>
    </form>
  );
};

export default AuthForm;


===== src//app/components/GadgetForm.jsx =====
"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { AlertTriangle, Bomb, Archive } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"

const GadgetForm = ({ gadget = null, onSubmit, onDelete, onSelfDestruct }) => {
  const isEditing = !!gadget

  const [formData, setFormData] = useState({
    name: gadget?.name || "",
    description: gadget?.description || "",
    status: gadget?.status || "Available",
  })

  const [confirmCode, setConfirmCode] = useState("")
  const [error, setError] = useState("")
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isDecommissioning, setIsDecommissioning] = useState(false)
  const [isSelfDestructing, setIsSelfDestructing] = useState(false)
  const [showDecommissionDialog, setShowDecommissionDialog] = useState(false)
  const [showSelfDestructDialog, setShowSelfDestructDialog] = useState(false)

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSelectChange = (value) => {
    setFormData((prev) => ({ ...prev, status: value }))
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    setError("")
    setIsSubmitting(true)

    try {
      await onSubmit(formData)
    } catch (err) {
      setError("Failed to save gadget")
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleDelete = async () => {
    setIsDecommissioning(true)
    try {
      await onDelete()
      setShowDecommissionDialog(false)
    } catch (err) {
      setError("Failed to decommission gadget")
    } finally {
      setIsDecommissioning(false)
    }
  }

  const handleSelfDestruct = async () => {
    setIsSelfDestructing(true)
    try {
      await onSelfDestruct(confirmCode)
      setShowSelfDestructDialog(false)
      setConfirmCode("")
    } catch (err) {
      setError("Self-destruct sequence failed")
    } finally {
      setIsSelfDestructing(false)
    }
  }

  return (
    <div className="space-y-8">
      <motion.form
        onSubmit={handleSubmit}
        className="space-y-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <div className="space-y-2">
          <Label htmlFor="name" className="text-sm font-medium">
            Gadget Name
          </Label>
          <Input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
            placeholder="Enter gadget name"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="description" className="text-sm font-medium">
            Description
          </Label>
          <Textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleChange}
            rows="4"
            required
            placeholder="Enter detailed description of the gadget"
          />
        </div>

        {isEditing && (
          <div className="space-y-2">
            <Label htmlFor="status" className="text-sm font-medium">
              Status
            </Label>
            <Select value={formData.status} onValueChange={handleSelectChange}>
              <SelectTrigger>
                <SelectValue placeholder="Select status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Available">Available</SelectItem>
                <SelectItem value="Deployed">Deployed</SelectItem>
                <SelectItem value="Destroyed">Destroyed</SelectItem>
                <SelectItem value="Decommissioned">Decommissioned</SelectItem>
              </SelectContent>
            </Select>
          </div>
        )}

        {error && (
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <Button type="submit" disabled={isSubmitting} className="gap-2">
          {isSubmitting && (
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
              className="h-4 w-4 border-2 border-current border-t-transparent rounded-full"
            />
          )}
          {isEditing ? "Update Gadget" : "Create Gadget"}
        </Button>
      </motion.form>

      {isEditing && (
        <motion.div
          className="border border-destructive/20 rounded-lg p-6 bg-destructive/5"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.2 }}
        >
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2 text-destructive">
            <AlertTriangle className="h-5 w-5" />
            Danger Zone
          </h3>

          <div className="space-y-4">
            <Dialog open={showDecommissionDialog} onOpenChange={setShowDecommissionDialog}>
              <DialogTrigger asChild>
                <Button
                  variant="outline"
                  className="bg-destructive/10 border-destructive/30 text-destructive hover:bg-destructive/20 hover:text-destructive gap-2"
                >
                  <Archive className="h-4 w-4" />
                  Decommission Gadget
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Decommission Gadget</DialogTitle>
                  <DialogDescription>
                    Are you sure you want to decommission this gadget? This action cannot be undone.
                  </DialogDescription>
                </DialogHeader>
                <Alert variant="destructive" className="mt-2">
                  <AlertTitle>Warning</AlertTitle>
                  <AlertDescription>
                    Decommissioning will permanently remove this gadget from active inventory.
                  </AlertDescription>
                </Alert>
                <DialogFooter className="mt-4">
                  <Button variant="ghost" onClick={() => setShowDecommissionDialog(false)}>
                    Cancel
                  </Button>
                  <Button variant="destructive" onClick={handleDelete} disabled={isDecommissioning} className="gap-2">
                    {isDecommissioning && (
                      <motion.div
                        animate={{ rotate: 360 }}
                        transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                        className="h-4 w-4 border-2 border-current border-t-transparent rounded-full"
                      />
                    )}
                    Confirm Decommission
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            <Dialog open={showSelfDestructDialog} onOpenChange={setShowSelfDestructDialog}>
              <DialogTrigger asChild>
                <Button variant="destructive" disabled={gadget?.status === "Destroyed"} className="gap-2">
                  <Bomb className="h-4 w-4" />
                  Self-Destruct Sequence
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Initiate Self-Destruct</DialogTitle>
                  <DialogDescription>
                    Enter confirmation code to initiate self-destruct sequence. This action cannot be undone.
                  </DialogDescription>
                </DialogHeader>
                <div className="mt-4 space-y-2">
                  <Label htmlFor="confirmCode">Confirmation Code</Label>
                  <Input
                    id="confirmCode"
                    value={confirmCode}
                    onChange={(e) => setConfirmCode(e.target.value)}
                    placeholder="Any code will work"
                  />
                </div>
                <Alert variant="destructive" className="mt-4">
                  <AlertTitle>Warning</AlertTitle>
                  <AlertDescription>
                    Self-destruct will permanently destroy this gadget. This action is irreversible.
                  </AlertDescription>
                </Alert>
                <DialogFooter className="mt-4">
                  <Button
                    variant="ghost"
                    onClick={() => {
                      setShowSelfDestructDialog(false)
                      setConfirmCode("")
                    }}
                  >
                    Cancel
                  </Button>
                  <Button
                    variant="destructive"
                    onClick={handleSelfDestruct}
                    disabled={!confirmCode || isSelfDestructing}
                    className="gap-2"
                  >
                    {isSelfDestructing && (
                      <motion.div
                        animate={{ rotate: 360 }}
                        transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                        className="h-4 w-4 border-2 border-current border-t-transparent rounded-full"
                      />
                    )}
                    Confirm Self-Destruct
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </motion.div>
      )}
    </div>
  )
}

export default GadgetForm


===== src//app/register/page.jsx =====
"use client"
import { useEffect } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import AuthForm from "../components/AuthForm"
import { useAuth } from "../contexts/AuthContext"
import { motion } from "framer-motion"
import { UserPlus } from "lucide-react"

export default function Register() {
  const { register, isAuthenticated, loading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (isAuthenticated && !loading) {
      router.push("/gadgets")
    }
  }, [isAuthenticated, loading, router])

  const handleRegister = async (formData) => {
    const result = await register(formData)
    if (result.success) {
      router.push("/login")
    }
    return result
  }

  if (loading || isAuthenticated) {
    return (
      <div className="flex justify-center items-center h-64">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1.5, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
          className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full"
        />
      </div>
    )
  }

  return (
    <div className="max-w-md mx-auto">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="text-center mb-8"
      >
        <div className="inline-flex justify-center items-center mb-4 bg-primary/10 p-3 rounded-full">
          <UserPlus className="h-10 w-10 text-primary" />
        </div>
        <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-purple-400 bg-clip-text text-transparent mb-2">
          Create Account
        </h1>
        <p className="text-muted-foreground">Join the IMF Gadget System</p>
      </motion.div>

      <div className="border rounded-lg p-6 shadow-sm">
        <AuthForm onSubmit={handleRegister} isRegister={true} />
      </div>

      <motion.div
        className="mt-6 text-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <p className="text-muted-foreground">
          Already have an account?{" "}
          <Link href="/login" className="text-primary hover:underline font-medium">
            Login
          </Link>
        </p>
      </motion.div>
    </div>
  )
}




===== src//app/profile/page.jsx =====
"use client"
import { useEffect } from "react"
import { useRouter } from "next/navigation"
import { useAuth } from "../contexts/AuthContext"
import { motion } from "framer-motion"
import { User, Shield, CheckCircle, Award } from "lucide-react"

export default function Profile() {
  const { user, isAuthenticated, loading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!loading && !isAuthenticated) {
      router.push("/login")
    }
  }, [isAuthenticated, loading, router])

  if (loading || !isAuthenticated) {
    return (
      <div className="flex justify-center items-center h-64">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1.5, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
          className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full"
        />
      </div>
    )
  }

  return (
    <div className="max-w-lg mx-auto">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="text-center mb-8"
      >
        <div className="inline-flex justify-center items-center mb-4 bg-primary/10 p-3 rounded-full">
          <User className="h-10 w-10 text-primary" />
        </div>
        <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-purple-400 bg-clip-text text-transparent mb-2">
          Agent Profile
        </h1>
        <p className="text-muted-foreground">Your IMF credentials and clearance</p>
      </motion.div>

      <motion.div
        className="card relative overflow-hidden"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <div className="absolute top-0 right-0 w-64 h-64 bg-primary/5 rounded-full -mr-32 -mt-32 z-0" />
        <div className="absolute bottom-0 left-0 w-32 h-32 bg-primary/10 rounded-full -ml-16 -mb-16 z-0" />

        <div className="relative z-10">
          <div className="grid gap-6 md:grid-cols-2">
            <div className="space-y-4">
              <div className="space-y-1">
                <p className="text-sm text-muted-foreground">Username</p>
                <p className="font-medium text-lg flex items-center gap-2">
                  <User className="h-4 w-4 text-primary" />
                  {user?.username}
                </p>
              </div>

              <div className="space-y-1">
                <p className="text-sm text-muted-foreground">Role</p>
                <p className="font-medium text-lg capitalize flex items-center gap-2">
                  <Shield className="h-4 w-4 text-primary" />
                  {user?.role}
                </p>
              </div>
            </div>

            <div className="space-y-4">
              <div className="space-y-1">
                <p className="text-sm text-muted-foreground">Clearance Level</p>
                <p className="font-medium text-lg flex items-center gap-2">
                  <Award className="h-4 w-4 text-primary" />
                  {user?.role === "admin" ? "Top Secret" : "Secret"}
                </p>
              </div>

              <div className="space-y-1">
                <p className="text-sm text-muted-foreground">Status</p>
                <p className="font-medium text-lg text-green-500 flex items-center gap-2">
                  <CheckCircle className="h-4 w-4" />
                  Active
                </p>
              </div>
            </div>
          </div>

          <div className="mt-8 pt-6 border-t">
            <div className="bg-muted/50 rounded-lg p-4">
              <p className="text-sm text-muted-foreground">
                <strong>Note:</strong> All actions performed in the IMF Gadget System are logged and monitored.
                Unauthorized access or misuse of gadgets is strictly prohibited and may result in immediate termination.
              </p>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  )
}




===== src//app/login/page.jsx =====
"use client"
import { useEffect } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import AuthForm from "../components/AuthForm"
import { useAuth } from "../contexts/AuthContext"
import { motion } from "framer-motion"
import { Fingerprint } from "lucide-react"

export default function Login() {
  const { login, isAuthenticated, loading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (isAuthenticated && !loading) {
      router.push("/gadgets")
    }
  }, [isAuthenticated, loading, router])

  const handleLogin = async (formData) => {
    const result = await login(formData)
    if (result.success) {
      router.push("/gadgets")
    }
    return result
  }

  if (loading || isAuthenticated) {
    return (
      <div className="flex justify-center items-center h-64">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1.5, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
          className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full"
        />
      </div>
    )
  }

  return (
    <div className="max-w-md mx-auto">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="text-center mb-8"
      >
        <div className="inline-flex justify-center items-center mb-4 bg-primary/10 p-3 rounded-full">
          <Fingerprint className="h-10 w-10 text-primary" />
        </div>
        <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-purple-400 bg-clip-text text-transparent mb-2">
          Welcome Back
        </h1>
        <p className="text-muted-foreground">Login to access the IMF Gadget System</p>
      </motion.div>

      <div className="border rounded-lg p-6 shadow-sm">
        <AuthForm onSubmit={handleLogin} />
      </div>

      <motion.div
        className="mt-6 text-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <p className="text-muted-foreground">
          Don't have an account?{" "}
          <Link href="/register" className="text-primary hover:underline font-medium">
            Register
          </Link>
        </p>
      </motion.div>
    </div>
  )
}




===== src//app/gadgets/page.jsx =====
"use client"; // Mark as Client Component
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation'; // Use `next/navigation`
import GadgetList from '../components/GadgetList';
import { gadgets } from '../utils/api';
import { useAuth } from '../contexts/AuthContext';

export default function GadgetsIndex() {
  const [gadgetList, setGadgetList] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { isAdmin, isAuthenticated, loading: authLoading } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();
  const status = searchParams.get('status'); // Get query parameter

  useEffect(() => {
    const fetchGadgets = async () => {
      try {
        setLoading(true);
        const { data } = await gadgets.getAll(status); // Get response data

        // Ensure that data exists and is correctly structured
        if (data?.data) {
          setGadgetList(data.data); // Access the nested data property
        } else {
          setError('No gadgets found');
        }
        setError('');
      } catch (err) {
        setError('Failed to fetch gadgets');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchGadgets();
  }, [status]);

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!authLoading && !isAuthenticated) {
      router.push('/login');
    }
  }, [isAuthenticated, authLoading, router]);

  // Show loading state while checking authentication or fetching gadgets
  if (authLoading || loading || !isAuthenticated) {
    return (
      <div className="flex justify-center items-center h-64">
        <p>Loading gadgets...</p>
      </div>
    );
  }

  return (
    <div>
      {error ? (
        <div className="text-red-500 text-center">{error}</div>
      ) : (
        <GadgetList gadgets={gadgetList} isAdmin={isAdmin()} />
      )}
    </div>
  );
}



===== src//app/gadgets/new/page.jsx =====
"use client"; // Mark as Client Component
import { useRouter } from 'next/navigation'; // Use `next/navigation`
import GadgetForm from '../../components/GadgetForm';
import { gadgets } from '../../utils/api';
import { useAuth } from '../../contexts/AuthContext';
import { useEffect } from 'react';

export default function NewGadget() {
  const router = useRouter();
  const { isAdmin, isAuthenticated, loading: authLoading } = useAuth();

  // Handle gadget creation
  const handleCreate = async (formData) => {
    try {
      const { data } = await gadgets.create(formData);
      console.log('Gadget creation response:', data); // Debugging

      // Redirect to the new gadget's detail page
      if (data.data && data.data.id) {
        router.push(`/gadgets/${data.data.id}`);
      } else {
        throw new Error('Gadget ID not found in response');
      }
    } catch (err) {
      console.error(err);
      throw err; // Propagate the error to the form for handling
    }
  };

  // Redirect to login if not authenticated or not admin
  useEffect(() => {
    if (!authLoading && (!isAuthenticated || !isAdmin())) {
      router.push('/login');
    }
  }, [isAuthenticated, authLoading, router]);

  // Show loading state while checking authentication
  if (authLoading || !isAuthenticated || !isAdmin()) {
    return (
      <div className="flex justify-center items-center h-64">
        <p>Loading...</p>
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">Create New Gadget</h1>
      <GadgetForm onSubmit={handleCreate} />
    </div>
  );
}


===== src//app/gadgets/[id]/page.jsx =====
"use client"
import React, { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import GadgetForm from "../../components/GadgetForm"
import { gadgets } from "../../utils/api"
import { useAuth } from "../../contexts/AuthContext"
import { getStatusColor, getProbabilityColor, formatDate } from "../../utils/helpers"
import { motion } from "framer-motion"
import { ArrowLeft, Clock, Zap, Calendar, RefreshCw, Archive } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"

export default function GadgetDetail({ params }) {
  const [gadget, setGadget] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState("")
  const [isEditing, setIsEditing] = useState(false)
  const { isAdmin, isAuthenticated, loading: authLoading } = useAuth()
  const router = useRouter()
  const searchParams = useSearchParams()
  const edit = searchParams.get("edit")

  const { id } = React.use(params)

  useEffect(() => {
    if (id) {
      fetchGadgetById(id)
    }
  }, [id])

  useEffect(() => {
    if (edit === "true" && !isEditing) {
      setIsEditing(true)
    }
  }, [edit])

  const fetchGadgetById = async (id) => {
    try {
      setLoading(true)
      const { data } = await gadgets.getById(id)

      if (data?.data) {
        setGadget(data.data)
      } else {
        throw new Error("Gadget data not found in response")
      }
      setError("")
    } catch (err) {
      setError("Failed to fetch gadget details")
      console.error(err)
    } finally {
      setLoading(false)
    }
  }

  const handleUpdate = async (formData) => {
    try {
      await gadgets.update(id, formData)
      await fetchGadgetById(id)
      setIsEditing(false)
      router.replace(`/gadgets/${id}`)
    } catch (err) {
      console.error(err)
      setError("Failed to update gadget")
      throw err
    }
  }

  const handleDecommission = async () => {
    try {
      await gadgets.decommission(id)
      await fetchGadgetById(id)
      setIsEditing(false)
    } catch (err) {
      console.error(err)
      setError("Failed to decommission gadget")
      throw err
    }
  }

  const handleSelfDestruct = async (confirmationCode) => {
    try {
      await gadgets.selfDestruct(id, confirmationCode)
      await fetchGadgetById(id)
      setIsEditing(false)
    } catch (err) {
      console.error(err)
      setError("Failed to initiate self-destruct")
      throw err
    }
  }

  useEffect(() => {
    if (!authLoading && !isAuthenticated) {
      router.push("/login")
    }
  }, [isAuthenticated, authLoading, router])

  if (authLoading || !isAuthenticated) {
    return (
      <div className="flex justify-center items-center h-64">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1.5, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
          className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full"
        />
      </div>
    )
  }

  return (
    <div className="max-w-3xl mx-auto">
      <div className="mb-6">
        <Button
          variant="ghost"
          onClick={() => router.push("/gadgets")}
          className="gap-2 hover:gap-3 transition-all duration-300"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back to Gadgets</span>
        </Button>
      </div>

      {loading ? (
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <Skeleton className="h-8 w-64" />
            <Skeleton className="h-6 w-24" />
          </div>
          <Skeleton className="h-4 w-48 mt-4" />
          <Skeleton className="h-4 w-32 mt-2" />
          <Skeleton className="h-32 w-full mt-4" />
          <div className="grid grid-cols-2 gap-4 mt-4">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
          </div>
        </div>
      ) : error ? (
        <motion.div
          className="bg-destructive/10 border border-destructive/30 rounded-lg p-6 text-center"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <p className="text-destructive">{error}</p>
          <Button variant="outline" onClick={() => router.push("/gadgets")} className="mt-4">
            Return to Gadgets
          </Button>
        </motion.div>
      ) : (
        <>
          {isAdmin() && (
            <div className="mb-6 flex justify-end">
              <Button
                onClick={() => setIsEditing(!isEditing)}
                variant={isEditing ? "secondary" : "default"}
                className="gap-2"
              >
                {isEditing ? (
                  <>
                    <span>Cancel Editing</span>
                  </>
                ) : (
                  <>
                    <span>Edit Gadget</span>
                  </>
                )}
              </Button>
            </div>
          )}

          {isEditing && isAdmin() ? (
            <GadgetForm
              gadget={gadget}
              onSubmit={handleUpdate}
              onDelete={handleDecommission}
              onSelfDestruct={handleSelfDestruct}
            />
          ) : (
            <motion.div
              className="card relative overflow-hidden"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <div className="absolute top-0 right-0 w-64 h-64 bg-primary/5 rounded-full -mr-32 -mt-32 z-0" />
              <div className="absolute bottom-0 left-0 w-32 h-32 bg-primary/10 rounded-full -ml-16 -mb-16 z-0" />

              <div className="relative z-10">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
                  <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-purple-400 bg-clip-text text-transparent">
                    {gadget?.name}
                  </h1>
                  <Badge className={`${getStatusColor(gadget?.status)} text-sm px-3 py-1`}>{gadget?.status}</Badge>
                </div>

                <div className="grid gap-6 md:grid-cols-2 mb-8">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-muted-foreground">
                      <span>Codename:</span>
                      <span className="font-mono bg-muted/50 px-2 py-0.5 rounded text-foreground">
                        {gadget?.codename}
                      </span>
                    </div>

                    <div className="flex items-center gap-2 text-muted-foreground">
                      <span>Mission Success Rate:</span>
                      <span
                        className={`font-semibold flex items-center gap-1 ${getProbabilityColor(gadget?.successProbability)}`}
                      >
                        <Zap className="h-4 w-4" />
                        {gadget?.successProbability}%
                      </span>
                    </div>
                  </div>

                  <div className="space-y-2 text-sm text-muted-foreground">
                    {gadget?.createdAt && (
                      <div className="flex items-center gap-2">
                        <Calendar className="h-4 w-4" />
                        <span>Created: {formatDate(gadget.createdAt)}</span>
                      </div>
                    )}

                    {gadget?.updatedAt && (
                      <div className="flex items-center gap-2">
                        <RefreshCw className="h-4 w-4" />
                        <span>Last Updated: {formatDate(gadget.updatedAt)}</span>
                      </div>
                    )}

                    {gadget?.decommissionedAt && (
                      <div className="flex items-center gap-2">
                        <Archive className="h-4 w-4" />
                        <span>Decommissioned: {formatDate(gadget.decommissionedAt)}</span>
                      </div>
                    )}
                  </div>
                </div>

                <div className="mb-6">
                  <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                    <Clock className="h-5 w-5 text-primary" />
                    Description
                  </h3>
                  <p className="leading-relaxed">{gadget?.description}</p>
                </div>
              </div>
            </motion.div>
          )}
        </>
      )}
    </div>
  )
}




===== src//components/ui/dialog.jsx =====
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props} />
  );
}

function DialogContent({
  className,
  children,
  ...props
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}>
        {children}
        <DialogPrimitive.Close
          className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({
  className,
  ...props
}) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props} />
  );
}

function DialogFooter({
  className,
  ...props
}) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end", className)}
      {...props} />
  );
}

function DialogTitle({
  className,
  ...props
}) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props} />
  );
}

function DialogDescription({
  className,
  ...props
}) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}



===== src//components/ui/skeleton.jsx =====
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props} />
  );
}

export { Skeleton }



===== src//components/ui/input.jsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({
  className,
  type,
  ...props
}) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props} />
  );
}

export { Input }



===== src//components/ui/textarea.jsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({
  className,
  ...props
}) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props} />
  );
}

export { Textarea }



===== src//components/ui/select.jsx =====
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}>
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}>
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn("p-1", position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1")}>
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("px-2 py-1.5 text-sm font-medium", className)}
      {...props} />
  );
}

function SelectItem({
  className,
  children,
  ...props
}) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}>
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props} />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...props}>
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...props}>
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}



===== src//components/ui/dropdown-menu.jsx =====
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}

function DropdownMenuPortal({
  ...props
}) {
  return (<DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />);
}

function DropdownMenuTrigger({
  ...props
}) {
  return (<DropdownMenuPrimitive.Trigger data-slot="dropdown-menu-trigger" {...props} />);
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props} />
    </DropdownMenuPrimitive.Portal>
  );
}

function DropdownMenuGroup({
  ...props
}) {
  return (<DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />);
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props} />
  );
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}>
      <span
        className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  );
}

function DropdownMenuRadioGroup({
  ...props
}) {
  return (<DropdownMenuPrimitive.RadioGroup data-slot="dropdown-menu-radio-group" {...props} />);
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}>
      <span
        className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  );
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn("px-2 py-1.5 text-sm font-medium data-[inset]:pl-8", className)}
      {...props} />
  );
}

function DropdownMenuSeparator({
  className,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props} />
  );
}

function DropdownMenuShortcut({
  className,
  ...props
}) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn("text-muted-foreground ml-auto text-xs tracking-widest", className)}
      {...props} />
  );
}

function DropdownMenuSub({
  ...props
}) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}>
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  );
}

function DropdownMenuSubContent({
  className,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props} />
  );
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}



===== src//components/ui/button.jsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props} />
  );
}

export { Button, buttonVariants }



===== src//components/ui/badge.jsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/70",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props} />
  );
}

export { Badge, badgeVariants }



===== src//components/ui/alert.jsx =====
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props} />
  );
}

function AlertTitle({
  className,
  ...props
}) {
  return (
    <div
      data-slot="alert-title"
      className={cn("col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight", className)}
      {...props} />
  );
}

function AlertDescription({
  className,
  ...props
}) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props} />
  );
}

export { Alert, AlertTitle, AlertDescription }



===== src//components/ui/label.jsx =====
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props} />
  );
}

export { Label }



===== src//lib/utils.js =====
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}



